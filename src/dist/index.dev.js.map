{"version":3,"sources":["index.js"],"names":["express","require","path","bcrypt","multer","mongoose","bodyParser","collection","Vendor","app","use","json","urlencoded","extended","set","get","req","res","render","post","data","name","body","username","password","role","findOne","existinguser","send","saltRounds","hash","hashedPassword","insertMany","userdata","console","log","redirect","error","status","check","compare","isPasswordMatch","vendorSchema","Schema","businessName","String","description","location","businessHoursStart","businessHoursEnd","contact","socialMediaLink1","socialMediaLink2","businessCertificate","tin","businessPicture","upload","dest","single","formData","file","businessPictureData","buffer","toString","newVendor","save","find","submitted","submittedVendors","put","vendorId","params","id","findByIdAndUpdate","approved","vendors","message","port","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst path = require(\"path\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst multer = require('multer');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst collection = require(\"./config\");\r\nconst Vendor = require(\"./Vendor\"); // Import your Vendor model\r\nconst app = express();\r\n\r\n// Middleware for parsing JSON bodies\r\napp.use(express.json());\r\n\r\n// Middleware for parsing urlencoded bodies\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\napp.set('view engine', 'ejs');\r\n\r\napp.use(express.static(\"public\"));\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.render(\"login\");\r\n});\r\n\r\napp.get(\"/signup\", (req, res) => {\r\n    res.render(\"signup\");\r\n});\r\napp.get(\"/admin\", (req, res) => {\r\n    res.render(\"admin\");\r\n});\r\n\r\napp.get(\"/home\", (req, res) => {\r\n  res.render(\"home\");\r\n});\r\n\r\n\r\napp.get(\"/verification\", (req, res) => {\r\n    res.render(\"verification\");\r\n});\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n    const data = {\r\n        name: req.body.username,\r\n        password: req.body.password,\r\n        role: req.body.role\r\n    }\r\n\r\n    try {\r\n        const existinguser = await collection.findOne({ name: data.name });\r\n        if (existinguser) {\r\n            res.send(\"User already exists. Please choose a different username.\");\r\n        } else {\r\n            const saltRounds = 10;\r\n            const hashedPassword = await bcrypt.hash(data.password, saltRounds);\r\n            data.password = hashedPassword;\r\n            const userdata = await collection.insertMany(data);\r\n            console.log(userdata);\r\n            res.redirect(\"/login\");\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send(\"An error occurred during user registration.\");\r\n    }\r\n});\r\n\r\napp.post(\"/login\", async (req, res) => {\r\n    try {\r\n        const check = await collection.findOne({ name: req.body.username });\r\n        if (!check) {\r\n            res.send(\"Username not found\");\r\n        } else {\r\n            const isPasswordMatch = await bcrypt.compare(req.body.password, check.password);\r\n            if (isPasswordMatch) {\r\n                res.render(\"home\");\r\n            } else {\r\n                res.send(\"Wrong password\");\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send(\"An error occurred during login.\");\r\n    }\r\n});\r\n\r\n// MongoDB Schema and Model for Vendor\r\nconst vendorSchema = new mongoose.Schema({\r\n    businessName: String,\r\n    description: String,\r\n    location: String,\r\n    businessHoursStart: String,\r\n    businessHoursEnd: String,\r\n    contact: String,\r\n    socialMediaLink1: String,\r\n    socialMediaLink2: String,\r\n    businessCertificate: String,\r\n    tin: String,\r\n    businessPicture: String // Add a field for business picture\r\n});\r\n\r\n// const Vendor = mongoose.model('Vendor', vendorSchema);\r\n\r\n// Set up multer for file uploads\r\nconst upload = multer({ dest: 'uploads/' });\r\n\r\n// Route for handling form submission to save vendor data\r\napp.post('/verification', upload.single('businessPicture'), async (req, res) => {\r\n    try {\r\n        // Get form data\r\n        const formData = req.body;\r\n\r\n        // Check if business picture file is uploaded\r\n        if (req.file) {\r\n            // Get business picture file data\r\n            const businessPicture = req.file;\r\n\r\n            // Convert the file to base64 format (you might need additional processing here)\r\n            const businessPictureData = businessPicture.buffer.toString('base64');\r\n\r\n            // Add the business picture data to the form data\r\n            formData.businessPicture = businessPictureData;\r\n        }\r\n\r\n        // Create a new Vendor instance with form data\r\n        const newVendor = new Vendor(formData);\r\n\r\n        // Save the new vendor to the database\r\n        await newVendor.save();\r\n\r\n        // Send success response\r\n        res.status(200).send('Vendor data saved successfully.');\r\n    } catch (error) {\r\n        // Send error response\r\n        console.error(error);\r\n        res.status(500).send('An error occurred while saving vendor data.');\r\n    }\r\n});\r\n\r\n// Route for fetching submitted vendors\r\napp.get('/submitted-vendors', async (req, res) => {\r\n    try {\r\n        const submittedVendors = await Vendor.find({ submitted: true });\r\n        res.json(submittedVendors);\r\n    } catch (error) {\r\n        console.error('Error fetching submitted vendors:', error);\r\n        res.status(500).send('An error occurred while fetching submitted vendors.');\r\n    }\r\n});\r\n\r\n// Route for approving a vendor\r\napp.put('/approve-vendor/:id', async (req, res) => {\r\n    try {\r\n        const vendorId = req.params.id;\r\n        // Update the vendor's approval status in the database\r\n        await Vendor.findByIdAndUpdate(vendorId, { approved: true });\r\n        res.status(200).send('Vendor approved successfully.');\r\n    } catch (error) {\r\n        console.error('Error approving vendor:', error);\r\n        res.status(500).send('An error occurred while approving vendor.');\r\n    }\r\n});\r\n\r\n// Route for rejecting a vendor\r\napp.put('/reject-vendor/:id', async (req, res) => {\r\n    try {\r\n        const vendorId = req.params.id;\r\n        // Update the vendor's approval status in the database\r\n        await Vendor.findByIdAndUpdate(vendorId, { approved: false });\r\n        res.status(200).send('Vendor rejected successfully.');\r\n    } catch (error) {\r\n        console.error('Error rejecting vendor:', error);\r\n        res.status(500).send('An error occurred while rejecting vendor.');\r\n    }\r\n});\r\n\r\n\r\napp.use(express.json());\r\n\r\napp.get('/api/vendors', async (req, res) => {\r\n    try {\r\n        const vendors = await Vendor.find();\r\n        res.json(vendors);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error fetching vendors' });\r\n    }\r\n});\r\n\r\nconst port = 8888;\r\napp.listen(port, () => {\r\n    console.log(`Server running on Port: ${port}`);\r\n});"],"file":"index.dev.js"}