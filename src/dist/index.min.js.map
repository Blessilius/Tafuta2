{"version":3,"sources":["index.js"],"names":["express","require","path","multer","bodyParser","collection","app","json","use","urlencoded","extended","set","req","res","render","get","post","data","hashedPassword","userdata","regeneratorRuntime","async","_context","prev","next","name","body","username","password","role","awrap","findOne","sent","send","bcrypt","insertMany","console","log","redirect","t0","existinguser","status","stop","check","_context2","compare","error","vendorSchema","mongoose","Schema","businessName","String","description","location","businessHoursStart","businessHoursEnd","contact","businessCertificate","tin","businessPicture","Vendor","model","dest","upload","single","formData","businessPictureData","newVendor","_context3","file","buffer","toString","save","isPasswordMatch","port","listen","concat"],"mappings":"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","file":"index.min.js","sourcesContent":["const express = require('express');\r\nconst path = require(\"path\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst multer = require('multer');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst collection = require(\"./config\");\r\n\r\nconst app = express();\r\n\r\n// Middleware for parsing JSON bodies\r\napp.use(express.json());\r\n\r\n// Middleware for parsing urlencoded bodies\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\napp.set('view engine', 'ejs');\r\n\r\napp.use(express.static(\"public\"));\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.render(\"login\");\r\n});\r\n\r\napp.get(\"/signup\", (req, res) => {\r\n    res.render(\"signup\");\r\n});\r\napp.get(\"/admin\", (req, res) => {\r\n    res.render(\"admin\");\r\n});\r\n\r\n\r\napp.get(\"/verification\", (req, res) => {\r\n    res.render(\"verification\");\r\n});\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n    const data = {\r\n        name: req.body.username,\r\n        password: req.body.password,\r\n        role: req.body.role\r\n    }\r\n\r\n    try {\r\n        const existinguser = await collection.findOne({ name: data.name });\r\n        if (existinguser) {\r\n            res.send(\"User already exists. Please choose a different username.\");\r\n        } else {\r\n            const saltRounds = 10;\r\n            const hashedPassword = await bcrypt.hash(data.password, saltRounds);\r\n            data.password = hashedPassword;\r\n            const userdata = await collection.insertMany(data);\r\n            console.log(userdata);\r\n            res.redirect(\"/login\");\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send(\"An error occurred during user registration.\");\r\n    }\r\n});\r\n\r\napp.post(\"/login\", async (req, res) => {\r\n    try {\r\n        const check = await collection.findOne({ name: req.body.username });\r\n        if (!check) {\r\n            res.send(\"Username not found\");\r\n        } else {\r\n            const isPasswordMatch = await bcrypt.compare(req.body.password, check.password);\r\n            if (isPasswordMatch) {\r\n                res.render(\"home\");\r\n            } else {\r\n                res.send(\"Wrong password\");\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send(\"An error occurred during login.\");\r\n    }\r\n});\r\n\r\n// MongoDB Schema and Model for Vendor\r\nconst vendorSchema = new mongoose.Schema({\r\n    businessName: String,\r\n    description: String,\r\n    location: String,\r\n    businessHoursStart: String,\r\n    businessHoursEnd: String,\r\n    contact: String,\r\n    socialMediaLink1: String,\r\n    socialMediaLink2: String,\r\n    businessCertificate: String,\r\n    tin: String,\r\n    businessPicture: String // Add a field for business picture\r\n});\r\n\r\nconst Vendor = mongoose.model('Vendor', vendorSchema);\r\n\r\n// Set up multer for file uploads\r\nconst upload = multer({ dest: 'uploads/' });\r\n\r\n// Route for handling form submission to save vendor data\r\napp.post('/verification', upload.single('businessPicture'), async (req, res) => {\r\n    try {\r\n        // Get form data\r\n        const formData = req.body;\r\n\r\n        // Check if business picture file is uploaded\r\n        if (req.file) {\r\n            // Get business picture file data\r\n            const businessPicture = req.file;\r\n\r\n            // Convert the file to base64 format (you might need additional processing here)\r\n            const businessPictureData = businessPicture.buffer.toString('base64');\r\n\r\n            // Add the business picture data to the form data\r\n            formData.businessPicture = businessPictureData;\r\n        }\r\n\r\n        // Create a new Vendor instance with form data\r\n        const newVendor = new Vendor(formData);\r\n\r\n        // Save the new vendor to the database\r\n        await newVendor.save();\r\n\r\n        // Send success response\r\n        res.status(200).send('Vendor data saved successfully.');\r\n    } catch (error) {\r\n        // Send error response\r\n        console.error(error);\r\n        res.status(500).send('An error occurred while saving vendor data.');\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nconst port = 8888;\r\napp.listen(port, () => {\r\n    console.log(`Server running on Port: ${port}`);\r\n});\r\n"]}