{"version":3,"sources":["index.js"],"names":["express","require","path","multer","bodyParser","collection","app","json","use","urlencoded","extended","set","res","render","get","req","data","hashedPassword","userdata","regeneratorRuntime","async","_context","prev","next","name","body","username","password","role","awrap","findOne","sent","bcrypt","hash","redirect","t0","existinguser","status","send","stop","post","check","_context2","compare","console","error","mongoose","Schema","businessName","String","description","location","businessHoursStart","businessHoursEnd","contact","socialMediaLink1","socialMediaLink2","businessPicture","upload","dest","single","formData","businessPictureData","newVendor","_context3","file","buffer","toString","Vendor","save","isPasswordMatch","submittedVendors","_context4","find","submitted","vendorId","_context5","params","id","findByIdAndUpdate","approved","_context6","vendors","_context7","message","port","log","concat"],"mappings":"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","file":"index.min.js","sourcesContent":["const express = require('express');\r\nconst path = require(\"path\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst multer = require('multer');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst collection = require(\"./config\");\r\nconst Vendor = require(\"./Vendor\"); // Import your Vendor model\r\nconst app = express();\r\n\r\n// Middleware for parsing JSON bodies\r\napp.use(express.json());\r\n\r\n// Middleware for parsing urlencoded bodies\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\napp.set('view engine', 'ejs');\r\n\r\napp.use(express.static(\"public\"));\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.render(\"login\");\r\n});\r\n\r\napp.get(\"/signup\", (req, res) => {\r\n    res.render(\"signup\");\r\n});\r\napp.get(\"/admin\", (req, res) => {\r\n    res.render(\"admin\");\r\n});\r\n\r\napp.get(\"/home\", (req, res) => {\r\n  res.render(\"home\");\r\n});\r\n\r\n\r\napp.get(\"/verification\", (req, res) => {\r\n    res.render(\"verification\");\r\n});\r\n\r\napp.post(\"/signup\", async (req, res) => {\r\n    const data = {\r\n        name: req.body.username,\r\n        password: req.body.password,\r\n        role: req.body.role\r\n    }\r\n\r\n    try {\r\n        const existinguser = await collection.findOne({ name: data.name });\r\n        if (existinguser) {\r\n            res.send(\"User already exists. Please choose a different username.\");\r\n        } else {\r\n            const saltRounds = 10;\r\n            const hashedPassword = await bcrypt.hash(data.password, saltRounds);\r\n            data.password = hashedPassword;\r\n            const userdata = await collection.insertMany(data);\r\n            console.log(userdata);\r\n            res.redirect(\"/login\");\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send(\"An error occurred during user registration.\");\r\n    }\r\n});\r\n\r\napp.post(\"/login\", async (req, res) => {\r\n    try {\r\n        const check = await collection.findOne({ name: req.body.username });\r\n        if (!check) {\r\n            res.send(\"Username not found\");\r\n        } else {\r\n            const isPasswordMatch = await bcrypt.compare(req.body.password, check.password);\r\n            if (isPasswordMatch) {\r\n                res.render(\"home\");\r\n            } else {\r\n                res.send(\"Wrong password\");\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send(\"An error occurred during login.\");\r\n    }\r\n});\r\n\r\n// MongoDB Schema and Model for Vendor\r\nconst vendorSchema = new mongoose.Schema({\r\n    businessName: String,\r\n    description: String,\r\n    location: String,\r\n    businessHoursStart: String,\r\n    businessHoursEnd: String,\r\n    contact: String,\r\n    socialMediaLink1: String,\r\n    socialMediaLink2: String,\r\n    businessCertificate: String,\r\n    tin: String,\r\n    businessPicture: String // Add a field for business picture\r\n});\r\n\r\n// const Vendor = mongoose.model('Vendor', vendorSchema);\r\n\r\n// Set up multer for file uploads\r\nconst upload = multer({ dest: 'uploads/' });\r\n\r\n// Route for handling form submission to save vendor data\r\napp.post('/verification', upload.single('businessPicture'), async (req, res) => {\r\n    try {\r\n        // Get form data\r\n        const formData = req.body;\r\n\r\n        // Check if business picture file is uploaded\r\n        if (req.file) {\r\n            // Get business picture file data\r\n            const businessPicture = req.file;\r\n\r\n            // Convert the file to base64 format (you might need additional processing here)\r\n            const businessPictureData = businessPicture.buffer.toString('base64');\r\n\r\n            // Add the business picture data to the form data\r\n            formData.businessPicture = businessPictureData;\r\n        }\r\n\r\n        // Create a new Vendor instance with form data\r\n        const newVendor = new Vendor(formData);\r\n\r\n        // Save the new vendor to the database\r\n        await newVendor.save();\r\n\r\n        // Send success response\r\n        res.status(200).send('Vendor data saved successfully.');\r\n    } catch (error) {\r\n        // Send error response\r\n        console.error(error);\r\n        res.status(500).send('An error occurred while saving vendor data.');\r\n    }\r\n});\r\n\r\n// Route for fetching submitted vendors\r\napp.get('/submitted-vendors', async (req, res) => {\r\n    try {\r\n        const submittedVendors = await Vendor.find({ submitted: true });\r\n        res.json(submittedVendors);\r\n    } catch (error) {\r\n        console.error('Error fetching submitted vendors:', error);\r\n        res.status(500).send('An error occurred while fetching submitted vendors.');\r\n    }\r\n});\r\n\r\n// Route for approving a vendor\r\napp.put('/approve-vendor/:id', async (req, res) => {\r\n    try {\r\n        const vendorId = req.params.id;\r\n        // Update the vendor's approval status in the database\r\n        await Vendor.findByIdAndUpdate(vendorId, { approved: true });\r\n        res.status(200).send('Vendor approved successfully.');\r\n    } catch (error) {\r\n        console.error('Error approving vendor:', error);\r\n        res.status(500).send('An error occurred while approving vendor.');\r\n    }\r\n});\r\n\r\n// Route for rejecting a vendor\r\napp.put('/reject-vendor/:id', async (req, res) => {\r\n    try {\r\n        const vendorId = req.params.id;\r\n        // Update the vendor's approval status in the database\r\n        await Vendor.findByIdAndUpdate(vendorId, { approved: false });\r\n        res.status(200).send('Vendor rejected successfully.');\r\n    } catch (error) {\r\n        console.error('Error rejecting vendor:', error);\r\n        res.status(500).send('An error occurred while rejecting vendor.');\r\n    }\r\n});\r\n\r\n\r\napp.use(express.json());\r\n\r\napp.get('/api/vendors', async (req, res) => {\r\n    try {\r\n        const vendors = await Vendor.find();\r\n        res.json(vendors);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error fetching vendors' });\r\n    }\r\n});\r\n\r\nconst port = 8888;\r\napp.listen(port, () => {\r\n    console.log(`Server running on Port: ${port}`);\r\n});"]}